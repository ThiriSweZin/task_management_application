import { HOTPOptions, HexString, OTP, SecretKey } from '../hotp';
/**
 * Allow HOTPOptions to accept async method options
 */
export declare type HOTPAsyncOptions = HOTPOptions<Promise<string>>;
/**
 * Generates the digest for HOTP based tokens.
 * Async version of [[hotpDigest]].
 */
export declare function hotpDigestAsync<T extends HOTPAsyncOptions = HOTPAsyncOptions>(secret: SecretKey, counter: number, options: Readonly<T>): Promise<HexString>;
/**
 * Async version of [[hotpToken]].
 */
export declare function hotpTokenAsync<T extends HOTPAsyncOptions = HOTPAsyncOptions>(secret: SecretKey, counter: number, options: Readonly<T>): Promise<string>;
/**
 * Async version of [[hotpCheck]].
 */
export declare function hotpCheckAsync<T extends HOTPAsyncOptions = HOTPAsyncOptions>(token: string, secret: SecretKey, counter: number, options: Readonly<T>): Promise<boolean>;
/**
 * Async version of [[HOTP]].
 */
export declare class HOTPAsync<T extends HOTPAsyncOptions = HOTPAsyncOptions> extends OTP<T> {
    create(defaultOptions?: Partial<T>): HOTPAsync<T>;
    allOptions(): Readonly<T>;
    generate(secret: SecretKey, counter: number): Promise<string>;
    check(token: string, secret: SecretKey, counter: number): Promise<boolean>;
    verify(opts: {
        token: string;
        secret: SecretKey;
        counter: number;
    }): Promise<boolean>;
    keyuri(accountName: string, issuer: string, secret: SecretKey, counter: number): Promise<string>;
}
