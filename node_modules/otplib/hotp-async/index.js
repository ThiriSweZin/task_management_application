/**
 * otplib-hotp-async
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.0-1
 * @license: MIT
 **/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var otplibHotp = require('../hotp');

async function hotpDigestAsync(secret, counter, options) {
  const hexCounter = otplibHotp.hotpCounter(counter);
  const hmacKey = await options.createHmacKey(options.algorithm, secret, options.encoding);
  return options.createDigest(options.algorithm, hmacKey, hexCounter);
}
async function hotpTokenAsync(secret, counter, options) {
  const digest = await hotpDigestAsync(secret, counter, options);
  return otplibHotp.hotpToken(secret, counter, { ...options,
    digest
  });
}
async function hotpCheckAsync(token, secret, counter, options) {
  const digest = await hotpDigestAsync(secret, counter, options);
  return otplibHotp.hotpCheck(token, secret, counter, { ...options,
    digest
  });
}
class HOTPAsync extends otplibHotp.OTP {
  create(defaultOptions = {}) {
    return new HOTPAsync(defaultOptions);
  }
  allOptions() {
    return otplibHotp.hotpOptions(this.options);
  }
  async generate(secret, counter) {
    return hotpTokenAsync(secret, counter, this.allOptions());
  }
  async check(token, secret, counter) {
    return hotpCheckAsync(token, secret, counter, this.allOptions());
  }
  async verify(opts) {
    return this.check(opts.token, opts.secret, opts.counter);
  }
  async keyuri(accountName, issuer, secret, counter) {
    return otplibHotp.hotpKeyuri(accountName, issuer, secret, counter, this.allOptions());
  }
}

exports.HOTPAsync = HOTPAsync;
exports.hotpCheckAsync = hotpCheckAsync;
exports.hotpDigestAsync = hotpDigestAsync;
exports.hotpTokenAsync = hotpTokenAsync;
