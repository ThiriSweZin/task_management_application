/**
 * otplib-authenticator-async
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 12.0.0-1
 * @license: MIT
 **/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var otplibAuthenticator = require('../authenticator');
var otplibTotpAsync = require('../totp-async');
var otplibCore = require('../core');

async function authenticatorDigestAsync(secret, options) {
  const decodedSecret = await otplibAuthenticator.authenticatorDecoder(secret, options);
  return otplibTotpAsync.totpDigestAsync(decodedSecret, options);
}
async function authenticatorTokenAsync(secret, options) {
  const digest = await authenticatorDigestAsync(secret, options);
  return otplibCore.totpToken(secret, { ...options,
    digest
  });
}
async function authenticatorCheckWithWindowAsync(token, secret, options) {
  const decodedSecret = await otplibAuthenticator.authenticatorDecoder(secret, options);
  return otplibTotpAsync.totpCheckWithWindowAsync(token, decodedSecret, options);
}
async function authenticatorGenerateSecretAsync(numberOfBytes, options) {
  const key = await options.createRandomBytes(numberOfBytes, options.encoding);
  return otplibAuthenticator.authenticatorEncoder(key, options);
}
class AuthenticatorAsync extends otplibTotpAsync.TOTPAsync {
  create(defaultOptions = {}) {
    return new AuthenticatorAsync(defaultOptions);
  }
  allOptions() {
    return otplibCore.authenticatorOptions(this.options);
  }
  async generate(secret) {
    return authenticatorTokenAsync(secret, this.allOptions());
  }
  async checkDelta(token, secret) {
    return authenticatorCheckWithWindowAsync(token, secret, this.allOptions());
  }
  async encode(secret) {
    return otplibAuthenticator.authenticatorEncoder(secret, this.allOptions());
  }
  async decode(secret) {
    return otplibAuthenticator.authenticatorDecoder(secret, this.allOptions());
  }
  async generateSecret(numberOfBytes = 10) {
    return authenticatorGenerateSecretAsync(numberOfBytes, this.allOptions());
  }
}

exports.AuthenticatorAsync = AuthenticatorAsync;
exports.authenticatorCheckWithWindowAsync = authenticatorCheckWithWindowAsync;
exports.authenticatorDigestAsync = authenticatorDigestAsync;
exports.authenticatorGenerateSecretAsync = authenticatorGenerateSecretAsync;
exports.authenticatorTokenAsync = authenticatorTokenAsync;
