import { HexString, SecretKey } from '../hotp';
import { AuthenticatorOptions, Base32SecretKey } from '../authenticator';
import { TOTPAsync } from '../totp-async';
/**
 * Allow AuthenticatorOptions to accept async method options.
 */
export declare type AuthenticatorAsyncOptions = AuthenticatorOptions<Promise<string>>;
/**
 * Generates the digest for Authenticator based tokens.
 *
 * Uses [[totpDigestAsync]].
 */
export declare function authenticatorDigestAsync<T extends AuthenticatorAsyncOptions = AuthenticatorAsyncOptions>(secret: Base32SecretKey, options: Readonly<T>): Promise<HexString>;
/**
 * Async version of [[authenticatorToken]].
 */
export declare function authenticatorTokenAsync<T extends AuthenticatorAsyncOptions = AuthenticatorAsyncOptions>(secret: Base32SecretKey, options: Readonly<T>): Promise<string>;
/**
 * Async version of [[authenticatorCheckWithWindow]].
 */
export declare function authenticatorCheckWithWindowAsync<T extends AuthenticatorAsyncOptions = AuthenticatorAsyncOptions>(token: string, secret: Base32SecretKey, options: Readonly<T>): Promise<number | null>;
export declare function authenticatorGenerateSecretAsync<T extends AuthenticatorAsyncOptions = AuthenticatorAsyncOptions>(numberOfBytes: number, options: Pick<T, 'keyEncoder' | 'encoding' | 'createRandomBytes'>): Promise<Base32SecretKey>;
/**
 * Async version of [[Authenticator]].
 */
export declare class AuthenticatorAsync<T extends AuthenticatorAsyncOptions = AuthenticatorAsyncOptions> extends TOTPAsync<T> {
    create(defaultOptions?: Partial<T>): AuthenticatorAsync<T>;
    allOptions(): Readonly<T>;
    generate(secret: SecretKey): Promise<string>;
    checkDelta(token: string, secret: SecretKey): Promise<number | null>;
    encode(secret: SecretKey): Promise<Base32SecretKey>;
    decode(secret: Base32SecretKey): Promise<SecretKey>;
    generateSecret(numberOfBytes?: number): Promise<Base32SecretKey>;
}
