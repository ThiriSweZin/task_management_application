import { HexString, SecretKey } from '../hotp';
import { TOTPOptions } from '../totp';
import { HOTPAsync } from '../hotp-async';
/**
 * Allow TOTPOptions to accept async method options.
 */
export declare type TOTPAsyncOptions = TOTPOptions<Promise<string>>;
/**
 * Generates the digest for TOTP based tokens.
 *
 * Uses [[hotpDigestAsync]].
 */
export declare function totpDigestAsync<T extends TOTPAsyncOptions = TOTPAsyncOptions>(secret: SecretKey, options: Readonly<T>): Promise<HexString>;
/**
 * Async version of [[totpToken]].
 */
export declare function totpTokenAsync<T extends TOTPAsyncOptions = TOTPAsyncOptions>(secret: SecretKey, options: Readonly<T>): Promise<string>;
/**
 * Async version of [[totpCheck]].
 */
export declare function totpCheckAsync<T extends TOTPAsyncOptions = TOTPAsyncOptions>(token: string, secret: SecretKey, options: Readonly<T>): Promise<boolean>;
/**
 * Async version of [[totpCheckByEpoch]].
 */
export declare function totpCheckByEpochAsync<T extends TOTPAsyncOptions = TOTPAsyncOptions>(epochs: number[], token: string, secret: SecretKey, options: Readonly<T>): Promise<number | null>;
/**
 * Async version of [[totpCheckWithWindow]].
 */
export declare function totpCheckWithWindowAsync<T extends TOTPAsyncOptions = TOTPAsyncOptions>(token: string, secret: SecretKey, options: Readonly<T>): Promise<number | null>;
/**
 * Async version of [[TOTP]].
 */
export declare class TOTPAsync<T extends TOTPAsyncOptions = TOTPAsyncOptions> extends HOTPAsync<T> {
    create(defaultOptions?: Partial<T>): TOTPAsync<T>;
    allOptions(): Readonly<T>;
    generate(secret: SecretKey): Promise<string>;
    checkDelta(token: string, secret: SecretKey): Promise<number | null>;
    check(token: string, secret: SecretKey): Promise<boolean>;
    verify(opts: {
        token: string;
        secret: SecretKey;
    }): Promise<boolean>;
    timeRemaining(): Promise<number>;
    timeUsed(): Promise<number>;
    keyuri(accountName: string, issuer: string, secret: SecretKey): Promise<string>;
}
